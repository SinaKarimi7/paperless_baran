// this file add some functions to node librarys ;)

var fs = require('fs');
var convert_date = require('date');
var db = require('mongo_schemas');
var _ = require('lodash');


String.remove_empty_data = function(data) {

    // console.open(data);

    for (var i in data)
        if (data[i] == null || _.isArray(data[i]) && data[i].length < 1 || data[i] == "")
            delete data[i];
        else if (_.isObject(data[i])) {
        String.remove_empty_data(data[i]);
    }
    return data;
}

String.password_generator = function() {
    var password;
    do {
        password = Math.floor(Math.random() * 999999);
    } while (String(password).length != 6);
    return String(password);
};

String.toEn = function toEn(str) {
    str = String(str);
    for (var i = 0; i < str.length; i++) {
        var temp = str.charAt(i).charCodeAt(0);
        if (temp >= 1776 && temp <= 1785) temp -= 1728;
        str = str.substr(0, i) + String.fromCharCode(temp) + str.substr(i + 1);
    }
    return str;
};

String.remove_comma = function(str) {
    return str.replace(/[^0-9 ]/g, "");
};


String.add_comma = function(nStr) {
    nStr += '';
    x = nStr.split('.');
    x1 = x[0];
    x2 = x.length > 1 ? '.' + x[1] : '';
    var rgx = /(\d+)(\d{3})/;
    while (rgx.test(x1)) {
        x1 = x1.replace(rgx, '$1' + ',' + '$2');
    }
    return x1 + x2;
};

Date.en_to_persion_date = function en_to_persion_date(d, callback) {
    var date = new Date(d);
    var _return = {};
    var min = date.getMinutes(),
        hour = date.getHours(),
        second = date.getSeconds();
    if (min < 60 - global.init.time_diffrence)
        min = Number(min) + global.init.time_diffrence;
    if (min < 10) min = '0' + String(min);
    if (hour < 10) hour = '0' + String(hour);
    if (second < 10) second = '0' + String(second);
    convert_date.to_shamsi({
        year: date.getFullYear(),
        month: date.getMonth() + 1,
        day: date.getDate()
    }, function(jalali) {
        _return.date = jalali.year + "/" + jalali.month + "/" + jalali.day;
        _return.time = hour + ":" + min + ":" + second;
        _return.second_less_time = hour + ":" + min;
        if (callback) callback(_return);
    });
}


//-------------------------------------------------------------------
// log income string with date is so better

console.temp = console.log;
console.log = function(string) {

    Date.en_to_persion_date(new Date(), function(date) {
        var s = "";
        s += date.date.substring(5) + " " + date.time + " -> ";
        console.temp(s.green + string);
        file_log(s + string + "\n");
        if (global.init.mongo_log) {
            mongo_log(s + string);
        }
    });
};

console.err = function(string) {
    Date.en_to_persion_date(new Date(), function(date) {
        var s = "";
        s += date.date.substring(5) + " " + date.time + " -> ";
        console.temp(s.green + string);
        file_log(s + string + "\n");
        mongo_log(s + string, "err");
    });
}

console.open = function(string) {
    var d = new Date();

    var month = d.getMonth() + 1;

    var s = month + "/";
    s += d.getDate() + " ";
    s += d.getHours() + ":";
    s += (d.getMinutes() > 9) ? d.getMinutes() : "0" + d.getMinutes();
    s += ":";
    s += (d.getSeconds() > 9) ? d.getSeconds() : "0" + d.getSeconds();

    console.temp(s.green + " -> ".green + JSON.stringify(string, null, "    "));
    file_log(s + " -> " + " " + string + "\n")

};

function file_log(log) {
    fs.appendFile("server/logs", log, function(err) {
        if (err) return console.temp(err);
    });
}

function mongo_log(log, type) {
    if (type && type == "err") {
        new db.err_logs({
            log: global.init.name + "_v" + global.init.version + " " + log
        }).save(function(err) {
            if (err) console.temp(err);
        });
    } else {
        new db.logs({
            log: global.init.name + "_v" + global.init.version + " " + log
        }).save(function(err) {
            if (err) console.temp(err);
        });
    }

}



String.replaceAt = function(index, character) {
    return this.substr(0, index) + character + this.substr(index + character.length);
};


Array.merge = function(array1, array2) {
    return _.uniq(array1.concat(array2));
};


// http://zackehh.com/handling-synchronous-asynchronous-loops-javascriptnode-js/
function async_while(iterations, func, callback) {
    callback = callback || function() {};
    var done = false;
    var foo = true;
    var loop = {
        next: function() {
            if (done) {
                return;
            }
            if (iterations) {
                func(loop);
            } else {
                done = true;
                if (callback) callback();
            }
        },

        refresh: function(it) {
            iterations = it;
        },

        break: function() {
            done = true;
            callback();
        }
    };
    loop.next();
    return loop;
}


String.sync_for = function(iterations, process, exit) {
    var index = 0,
        done = false,
        shouldExit = false;
    var loop = {
        next: function() {
            if (done) {
                if (shouldExit && exit) {
                    return exit(); // Exit if we're done
                }
            }
            // If we're not finished
            if (index < iterations) {
                index++; // Increment our index
                process(loop); // Run our process, pass in the loop
                // Otherwise we're done
            } else {
                done = true; // Make sure we say we're done
                if (exit) exit(); // Call the callback on exit
            }
        },
        iteration: function() {
            return index - 1; // Return the loop number we're on
        },
        minmin: function() {
            index = index - 1;
        },
        break: function(end) {
            done = true; // End the loop
            shouldExit = end; // Passing end as true means we still call the exit callback
        }
    };
    loop.next();
    return loop;
};

String.remove_space = function(str) {
    return str.replace(/\s/g, '');
};

String.bfs = function(_id, cb) {
    cb = cb || function() {};
    _id = String(_id);
    var q = [],
        res = [];

    db.tasks.findOne({
        _id: _id
    }, {
        __v: false
    }).lean().exec(function(err, root) {
        root.depth = 0;
        q.push(root);

        async_while(q.length, function(loop) {
            res.push(q[0]);
            db.tasks.find({
                _parent: q[0]._id
            }, {
                __v: false
            }).lean().exec(function(err, new_nodes) {
                if (err) console.log(err);
                else {
                    var d = q[0].depth;
                    q.shift();
                    loop.refresh(new_nodes.length + q.length);
                    if (new_nodes.length > 0) {
                        new_nodes.forEach(function(new_node) {
                            new_node.depth = d + 1;
                            q.push(new_node);
                        });
                    }
                    loop.next();
                }
            });
        }, function() {
            cb(res)
        });
    });
}